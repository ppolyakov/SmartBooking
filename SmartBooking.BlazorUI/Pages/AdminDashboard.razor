@attribute [Authorize(Roles = "Admin")]
@page "/admin"
@inject IServiceService ServiceService
@inject ITimeSlotsService TimeSlotService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5" Class="mb-4">Admin Dashboard</MudText>

    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewService" Color="Color.Primary" Class="mb-4">
        Add New Service
    </MudButton>

    <MudExpansionPanels>
        @foreach (var service in _services)
        {
            <MudExpansionPanel Text="@(service.Title + " " + (service.Duration.TotalMinutes + "min"))">
                <MudText Typo="Typo.subtitle2">Time Slots</MudText>

                <MudButton Color="Color.Info" OnClick="() => GenerateSlots(service.Id)" Disabled="@(_generatingServiceId == service.Id)">
                    @if (_generatingServiceId == service.Id)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="mr-2" />
                        <MudText>Generating...</MudText>
                    }
                    else
                    {
                        <MudText>Generate Slots (Today)</MudText>
                    }
                </MudButton>

                <MudTable Items="service.Slots" Dense="true" Hover="true" Class="mt-3">
                    <HeaderContent>
                        <MudTh>Time</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Client</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.StartTime.ToString("g")</MudTd>
                        <MudTd>
                            @if (context.IsBooked)
                            {
                                <MudChip T="string" Color="Color.Error">Booked</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Color="Color.Success">Free</MudChip>
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.IsBooked)
                            {
                                @context.ClientEmail
                            }
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                           OnClick="@(() => DeleteSlot(context.Id, service.Id))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudPaper>

@code {
    private List<ServiceWithSlotsDto> _services = [];
    private Guid? _generatingServiceId;

    protected override async Task OnInitializedAsync()
    {
        var result = await ServiceService.GetServicesWithSlotsAsync();
        if (result.IsSuccess)
        {
            _services = result.Value;
        }
        else
        {
            Snackbar.Add($"Failed to load services: {result.ErrorMessage}", Severity.Error);
        }
    }

    private void AddNewService()
    {
        Nav.NavigateTo("/admin/new-service");
    }

    private async Task GenerateSlots(Guid serviceId)
    {
        _generatingServiceId = serviceId;

        var result = await ServiceService.GenerateSlotsAsync(serviceId, DateTime.Today);
        _generatingServiceId = null;

        if (result.IsSuccess)
        {
            Snackbar.Add("Slots generated", Severity.Success);
            var resultServices = await ServiceService.GetServicesWithSlotsAsync();
            if (resultServices.IsSuccess)
            {
                _services = resultServices.Value;
            }
            else
            {
                Snackbar.Add($"Failed to refresh services: {resultServices.ErrorMessage}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Failed to generate: {result.ErrorMessage}", Severity.Error);
        }
    }

    private async Task DeleteSlot(Guid slotId, Guid serviceId)
    {
        var result = await TimeSlotService.DeleteSlotAsync(slotId);

        if (result.IsSuccess)
        {
            Snackbar.Add("Slot deleted", Severity.Success);
            var resultServices = await ServiceService.GetServicesWithSlotsAsync();
            if (resultServices.IsSuccess)
            {
                _services = resultServices.Value;
            }
            else
            {
                Snackbar.Add($"Failed to refresh services: {resultServices.ErrorMessage}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Failed to delete slot: {result.ErrorMessage}", Severity.Error);
        }
    }
}