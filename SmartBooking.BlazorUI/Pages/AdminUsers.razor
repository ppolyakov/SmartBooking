@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Users</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddDialog">
        Add User
    </MudButton>

    <MudDataGrid @ref="dataGrid" Items="_users" Hover="true">
        <Columns>
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <TemplateColumn Title="Admin">
                <CellTemplate>
                    <MudText>@((context.Item.Roles.Contains("Admin") ? "Yes" : "No"))</MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Secondary" OnClick="() => ShowEditDialog(context.Item)">Edit</MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" OnClick="() => Delete(context.Item.Id)">Delete</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    private List<UserDto> _users = [];
    private UserDto? _editUser;
    private MudDataGrid<UserDto> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        var result = await UserService.GetAllAsync();
        if (result.IsSuccess)
        {
            _users = result.Value;
        }
        else
        {
            Snackbar.Add($"Failed to load users: {result.ErrorMessage}", Severity.Error);
        }
    }

    private async Task ShowAddDialog()
    {
        var parameters = new DialogParameters
        {
            ["IsNew"] = true
        };
        var dialog = await DialogService.ShowAsync<UserEditDialog>("Add User", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await Reload();
    }

    private async Task ShowEditDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            ["EditUser"] = user,
            ["IsNew"] = false
        };
        var dialog = await DialogService.ShowAsync<UserEditDialog>("Edit User", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await Reload();
    }

    private async Task Delete(string id)
    {
        var result = await UserService.DeleteAsync(id);
        if (result.IsSuccess)
        {
            Snackbar.Add("Deleted", Severity.Success);
            await Reload();
        }
        else
            Snackbar.Add($"Delete failed: {result.ErrorMessage}", Severity.Error);
    }

    private async Task Reload()
    {
        var result = await UserService.GetAllAsync();
        if (result.IsSuccess)
        {
            _users = result.Value;
        }
        else
        {
            Snackbar.Add($"Failed to reload users: {result.ErrorMessage}", Severity.Error);
        }

        if (dataGrid != null)
            await dataGrid.ReloadServerData();

        StateHasChanged();
    }
}